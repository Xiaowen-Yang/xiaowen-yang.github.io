<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mistakes related to Return and Parents</title>
      <link href="/2025/03/11/Mistakes-related-to-Return-and-Parents/"/>
      <url>/2025/03/11/Mistakes-related-to-Return-and-Parents/</url>
      
        <content type="html"><![CDATA[<p>In today’s course, I made <strong>two mistakes about the return and function’s parent.</strong> I think it is a good place to document the reasons and avoid same errors later.</p><h2 id="Return"><a href="#Return" class="headerlink" title="Return"></a>Return</h2><p>Sometimes, when we create a <code>frame_1</code> and then call other function(<code>g</code>) before return.</p><p>The second step, we have to wait for the <code>g</code> to return, then we have the <code>frame_1</code>‘s return. </p><p>However, I tend to overlook this point when dealing with multiple lambda-expression used together. Here is an pedagogical but nasty example.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="keyword">lambda</span> x: <span class="keyword">lambda</span> y: <span class="keyword">lambda</span> z: g(x + y + z)</span><br><span class="line"></span><br><span class="line">g = f(<span class="number">3</span>)</span><br><span class="line">h = f(<span class="number">4</span>)(<span class="number">5</span>)(<span class="number">6</span>)</span><br></pre></td></tr></table></figure><p>Firstly, I know that function <code>g</code> is a lambda function <code>λ(y)</code>. As when we call function <code>f</code>, we pass the argument 3 to the parameter x, then we get the return <code>λ(y)</code>.</p><p>Secondly,  we call function <code>f</code> again, passing the argument 4 to the <code>x</code>, then we get the return <code>λ(y)</code>.</p><p>Thirdly, we call  <code>λ(y)</code>, passing the argument 5 to the y, then we get the return  <code>λ(z)</code>.</p><p>Then, we call  <code>λ(z)</code>, passing the argument 6 to the <code>z</code>, then we return the <code>g</code> function. As I know function <code>g</code> is a lambda function <code>λ(y)</code>in the first step, I return the lambda function<code>λ(y)</code>.</p><p>Lastly,  we call function <code>g</code>, that is <code>λ(y)</code>, then we pass 4+5+6&#x3D;15 to y and getting the return <code>λ(z)</code>, that is function <code>h</code>.</p><p><strong>! ! ! Here, I made the mistake.</strong> Why? Looking at the wrong environment diagram, which using red color to highlight mistakes.</p><p><img src="/../image/image-20250311220331108.png" alt="image-20250311220331108"></p><ul><li><p><strong>Error 1:</strong> </p><p>In f4, we firstly call function <code>g</code>, so we should not return function g directly, but should pass the argument 4+5+6&#x3D;15 to the parameter y of function <code>g</code>. Then, we back to f4 to return the same of f5’s return.</p></li><li><p><strong>Error 2:</strong> </p><p>The parent of f5 should be f1. <strong>The parent of a frame is determined by where it is created&#x2F;defined, that is, the parent of a frame is determined by th function’s parent</strong>Hence, as function <code>g</code> is <code>λ(y)</code>, also, <code>λ(y)</code> is calld in f1, the parent of f5 should be f1.</p></li></ul><p>Here is a correct environment diagram.</p><p><img src="/../image/image-20250311222406183.png" alt="image-20250311222406183"></p><h2 id="Parent"><a href="#Parent" class="headerlink" title="Parent"></a>Parent</h2><p><strong>The parent of a function is determined by where it is created&#x2F;defined.</strong></p><p>Here is a example, which using red color to highlight mistakes.</p><p><img src="/../image/image-20250311232918892.png" alt="image-20250311232918892"></p><ul><li><p><strong>Error 1:</strong> </p><p>λ(pr) is defined in Global, so the parent of it is Global. </p></li><li><p><strong>Error 2:</strong> </p><p>We know that the parent of a frame is determined by where it is defined, also,  λ(pr)’s parent is Global. So, the parent of f4 is Global.</p></li></ul><p>Here is a correct environment diagram.</p><p><img src="/../image/image-20250311234735651.png" alt="image-20250311234735651"></p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><table><thead><tr><th></th><th>function’s parent</th><th>frame’s parent <br />(Lexical Parent Scope)</th><th>frame’s f_back<br /> (Call Stack Parent Frame)</th></tr></thead><tbody><tr><td><strong>Definition</strong></td><td>Determined at definition time</td><td>Determined at definition time</td><td>Parent frame in the call stack, determined at runtime</td></tr><tr><td><strong>Nature</strong></td><td>Static</td><td>Static</td><td>Dynamic</td></tr><tr><td><strong>Purpose</strong></td><td>Variable lookup (scope chain)</td><td>Variable lookup (scope chain)</td><td>Track call stack (e.g., debugging, traceback)</td></tr></tbody></table><ul><li><p><strong>Lexical Parent Scope (parent)</strong></p><p>Both <strong>function’s parent and frame’s parent</strong> in an Environment Diagram are <strong>static</strong>, determined by the <strong>definition</strong> context, and used for variable resolution along the scope chain.</p></li><li><p><strong>Call Stack Parent Frame (f_back)</strong></p><p> The f_back of a frame is dynamic, determined by the runtime call stack, and used for tracking the sequence of function calls.</p></li></ul><h3 id="Additional-Notes"><a href="#Additional-Notes" class="headerlink" title="Additional Notes"></a>Additional Notes</h3><ol><li>When analyzing code execution, especially with nested functions or multiple lambda expressions, it’s easy to overlook the fact that <strong>a frame (frame_1) created by a function call must wait for inner function calls (e.g., g) to complete and return before frame_1 itself can return</strong>. This sequential dependency can lead to confusion in complex scenarios, such as when multiple lambda expressions are nested or chained together.</li><li>Intrinsic name (when a function is created&#x2F;defined) is not as important as bound name, which is a factual function that we call.</li></ol>]]></content>
      
      
      <categories>
          
          <category> Computer Programming </category>
          
          <category> CS 61A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lambda expression </tag>
            
            <tag> my mistakes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Complex lambda expression and some mistakes</title>
      <link href="/2025/03/10/Complex-lambda-expression-and-some-mistakes/"/>
      <url>/2025/03/10/Complex-lambda-expression-and-some-mistakes/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>In mathematics, we have f(x)&#x3D;y, then we can find a inverse function of f(x) named  g such that  g(y)&#x3D;x.</p><p>The question is if I want to achieve this function using computer programming and I do not know mathematical methods, how do I design a program?</p><p>The answer must be <strong>loop &amp; validation (problem-solving by violence)</strong>.</p><p> At the beginning, we <strong>only have the body of f(x) and y.</strong> </p><p>So, firstly, we start from a number <code>x</code>, then we create a loop, in the loop, we judge whether<code>f(x) = y</code>. If not, we increase <code>x</code>by 1 and repeat the loop. If they are equal, we return the value of <code>x</code>.</p><p>Note that here, <strong>we don’t need to know the specific mathematical structure of g(y).</strong> We just need to be able to **output the correct value <code>x</code>**to represent we find the specific <code>g(y)</code>.</p><h2 id="A-simple-example"><a href="#A-simple-example" class="headerlink" title="A simple example"></a>A simple example</h2><p>Let us firstly consider f(x) &#x3D; x^2.</p><p>Firstly, we create a <code>search</code> function to find the smallest non-negative integer x for which f(x) is a True value.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">f</span>):</span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> f(x):</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">        x = x + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>Then, we consider finding the inverse function of $$x^2$$.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sqrt</span>(<span class="params">y</span>):</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_sqrt_of_y</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> square(x) == y</span><br><span class="line">    <span class="keyword">return</span> search(is_sqrt_of_y)</span><br></pre></td></tr></table></figure><p>Test results:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; sqrt(9)</span><br><span class="line">&gt;&gt;&gt; 3</span><br></pre></td></tr></table></figure><p>Here, the <code>sqrt(y)</code> is our inverse function of <code>square(x)</code>.</p><h2 id="Generalization"><a href="#Generalization" class="headerlink" title="Generalization"></a>Generalization</h2><p>From the simple example, we can see that the <strong>final result we return is essentially the function <code>sqrt(y)</code>.</strong> Therefore, we can generalize based on this.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">f</span>):</span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> f(x):</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">        x = x + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">function</span>(<span class="params">x</span>):</span><br><span class="line"><span class="keyword">return</span> x + <span class="number">5</span> <span class="comment"># You can writh anything expression regarding x</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inverse</span>(<span class="params">f</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inverse_of_y</span>(<span class="params">y</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">is_inverse_of_y</span>(<span class="params">x</span>):</span><br><span class="line">            <span class="keyword">return</span> f(x) == y</span><br><span class="line">        <span class="keyword">return</span> search(is_inverse_of_y)</span><br><span class="line">    <span class="keyword">return</span> inverse_of_y</span><br><span class="line"></span><br><span class="line">inv = inverse(function)</span><br></pre></td></tr></table></figure><p>Test results:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; inv(100)</span><br><span class="line">&gt;&gt;&gt; 95</span><br></pre></td></tr></table></figure><p>As there is a closure and a likely closure, we can write this code by lambda-expression.</p><p><img src="/../image/image-20250311173740247.png" alt="image-20250311173740247"></p><p><strong>Using lambda-expression re-write inverse function</strong></p><p>At first, I write this code. Unfortunately, I made a <strong>mistake</strong>.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">inverse</span>(<span class="params">f</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> y: lambad x: search(f(x) == y)</span><br></pre></td></tr></table></figure><p>When I write <code>inv(81)</code>to call <code>inv</code>, the return is a function. Why? Let we see the environment diagram.</p><p><img src="/../image/image-20250311175135953.png" alt="image-20250311175135953"></p><p>The reason is that when we call <code>inverse</code> we return a lambda function <code>λ(y)</code>, then <code>inv</code> is <code>λ(y)</code>. </p><p>Later, we write <code>inv(81)</code>to call <code>inv</code>, that is to call <code>λ(y)</code>. Then we return a lambda function <code>λ(x)</code>.</p><p>As we want to return the value of function <code>search</code>, we should correct the code.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">inverse</span>(<span class="params">f</span>):</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">lambda</span> y: search(<span class="keyword">lambda</span> x: f(x) == y)</span><br></pre></td></tr></table></figure><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>In the article “Closure” wrote by me, I mentioned that we usually <strong>see lambda expression as a closure</strong>. So, how do they correspond to each?</p><p>The otter function which takes one argument&lt;——&gt;The otter function including lambda-expression</p><p>The inner function&lt;——&gt;The lambda-expression</p><p>The parameter of the inner function&lt;——&gt;Lambda-expression’s parameter</p><p>The body of the inner function&lt;——&gt;The lambda-expression</p>]]></content>
      
      
      <categories>
          
          <category> Computer Programming </category>
          
          <category> CS 61A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lambda expression </tag>
            
            <tag> my mistakes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>About Closure</title>
      <link href="/2025/03/09/About%20closure/"/>
      <url>/2025/03/09/About%20closure/</url>
      
        <content type="html"><![CDATA[<p>I am recently studying the CS 61A (Computer Programming) course at UCB. I got really confused when I encountered higher-order functions for the first time. This is because I was introduced to λ-functions, and I didn’t understand a key concept in computer programming: <strong>closure</strong>. To help myself understand better, I wrote this post to clarify my thoughts.</p><h2 id="Closure"><a href="#Closure" class="headerlink" title="Closure"></a>Closure</h2><h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>A closure is an inner function that can remember some variables in the scope of its enclosing function (outer function), even after the enclosing function has finished calling.</p><h3 id="The-composition"><a href="#The-composition" class="headerlink" title="The composition"></a>The composition</h3><ol><li>Nested Function</li><li>The inner function <strong>references the variables</strong> of the outer function</li><li>The outer function <strong>return the inner function</strong>, rather than directly implementing it</li></ol><h3 id="Why-we-need-a-closure"><a href="#Why-we-need-a-closure" class="headerlink" title="Why we need a closure?"></a>Why we need a closure?</h3><p>We all know that when we call a function, we create a frame. Then, when we implement then function and return, the frame is destroyed. That is, we left nothing.</p><p>Therefore, when we want to hold on some variables even after the function has destroyed, we need a closure. A closure is a persistent local variable scope. It gives us function portability.</p><h2 id="A-simple-example"><a href="#A-simple-example" class="headerlink" title="A simple example"></a>A simple example</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">outter</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">y</span>):</span><br><span class="line">        <span class="keyword">return</span> x + y</span><br><span class="line">    <span class="keyword">return</span> inner <span class="comment"># Return a closure</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = outter(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">sum</span>(<span class="number">5</span>)</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><ul><li>When we call <code>outter (1)</code>, we have <code>x = 1</code> in the outter frame, define function <code>inner(y)</code> and return this function as a closure.</li><li>Then, <code>sum</code> is the return function <code>inner(y)</code> ,<code>sum(5)</code>means <code>inner(5)</code></li><li>Lastly, return <code>x + y</code>,that is 1+5, the result is 6</li></ul><p>The term closure is often used as a synonym for <strong>anonymous function (lambda expression)</strong>.</p><h2 id="lambda-expression"><a href="#lambda-expression" class="headerlink" title="lambda expression"></a>lambda expression</h2><p>Most of time, when we want to define a new function, we needed to give it a name. But for other types of expressions, we don’t need to associate intermediate values with a name.  That is anonymous function.</p><h3 id="Definition-1"><a href="#Definition-1" class="headerlink" title="Definition"></a>Definition</h3><p>A lambda expression evaluates to a function that has <strong>a single return expression as its body</strong>. Assignment and <strong>control statements are not allowed</strong>.</p><p>Let me give you a common function that return $$x^2$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>): </span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line"><span class="comment">#square is a name</span></span><br></pre></td></tr></table></figure><p>Then, this is a lambda expression having the same action</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> x: x * x</span><br><span class="line"></span><br><span class="line"><span class="comment"># must a single expression after &quot;:&quot;</span></span><br><span class="line"><span class="comment"># no return keywork</span></span><br><span class="line"><span class="comment"># no name</span></span><br></pre></td></tr></table></figure><h3 id="Same-function-as-the-previous"><a href="#Same-function-as-the-previous" class="headerlink" title="Same function as the previous"></a>Same function as the previous</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">outter</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> y: x + y <span class="comment">#return a closure</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = outter(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">sum</span>(<span class="number">5</span>)</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><h3 id="Why-lambda-expression"><a href="#Why-lambda-expression" class="headerlink" title="Why lambda expression?"></a>Why lambda expression?</h3><p>The special thing about lambda expressions is that they <strong>don’t pollute</strong> your name space. Often, we use some function names only once.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>An analogy of closure in life. You have a bag containing food and you hire a chef who can use the food to cook. One day, you send the chef out with the bag, and the chef can cook with the food in the bag.</p>]]></content>
      
      
      <categories>
          
          <category> Computer Programming </category>
          
          <category> CS 61A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lambda expression </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/03/08/hello-world/"/>
      <url>/2025/03/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
